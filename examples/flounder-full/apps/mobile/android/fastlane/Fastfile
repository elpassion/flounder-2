default_platform(:android)

before_all do
  ensure_git_branch(
    branch: "main"
  )
  git_pull
end

platform :android do
  def increment_version_code()
    path = "../app/build.gradle"
    versionCodeRegExp = /versionCode\s+(\d+)/

    fileData = File.read(path)
    versionCode = fileData[versionCodeRegExp, 1].to_i
    fileData[versionCodeRegExp, 1] = (versionCode + 1).to_s

    f = File.new(path, 'w')
    f.write(fileData)
    f.close
  end

  def increment_version_number(bump_type: nil, version_number: nil)
    path = "../app/build.gradle"
    newVersion = ""

    versionNameRegExp = /versionName\s+("\d+.\d+.\d+")/

    fileData = File.read(path)
    versionName = fileData[versionNameRegExp, 1].gsub!('"','').split('.')

    major = versionName[0].to_i
    minor = versionName[1].to_i
    patch = versionName[2].to_i

    if (bump_type == "major")
      major += 1
      minor = 0
      patch = 0
    elsif (bump_type == "minor")
      minor += 1
      patch = 0
    elsif (bump_type == "patch")
      patch += 1
    end

    if(version_number)
      newVersion = version_number
      fileData[versionNameRegExp, 1] = "\"#{newVersion}\""
    else
      newVersion = "#{major}.#{minor}.#{patch}"
      fileData[versionNameRegExp, 1] = "\"#{newVersion}\""
    end

    f = File.new(path, "w")
    f.write(fileData)
    f.close

    return newVersion
  end

  def update_version(options)
    newVersion = ""
    if options[:version]
      version = options[:version]
    else
      version = UI.user_error!("[ERROR] Version not specified (major, minor, patch, 1.0.0)")
    end

    versionNameRegExp = /\d+.\d+.\d+/
    versionNum = version[versionNameRegExp, 0]

    if (versionNum)
      newVersion = increment_version_number(
        version_number: versionNum
      )
    elsif (version == "major" || version == "minor" || version == "patch")
      newVersion = increment_version_number(
        bump_type: version
      )
    else
      UI.user_error!("[ERROR] Wrong version")
    end

    increment_version_code()
    filePath = "#{Dir.pwd}".gsub!('fastlane','app/build.gradle');
    git_commit(path: [filePath], message: "ci: Android version bump to #{newVersion}")
    push_to_git_remote
  end

  desc "Build Android Release Bundle"
  private_lane :build do
    gradle(task: "clean")
    gradle(
      task: "bundle",
      build_type: "Release",
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => "#{Dir.pwd}/#{ENV['ANDROID_KEYSTORE_FILE']}",
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEYSTORE_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEYSTORE_PASSWORD"]
      }
    )
  end

  desc "Deploy a new version to the Google Internal Test"
  private_lane :deploy do
    upload_to_play_store(
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_screenshots: true,
      skip_upload_images: true,
      skip_upload_apk: true,
      changes_not_sent_for_review: true,
      track: 'internal'
    )
  end

  desc "Build and deploy Android Bundle to Google Internal Test"
  lane :build_and_deploy do |options|
    build
    deploy

    git_pull
    update_version(options)
  end
end
